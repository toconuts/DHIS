<?php

namespace DHIS\Bundle\SComDisBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DistrictRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DistrictRepository extends EntityRepository
{
    /**
     * Find All District.
     * 
     * @return array $districts
     */
    public function findAll()
    {
        $districts = parent::findAll();
        $this->updatePopulationRatio($districts, $this->getTotalPopulation($districts));
        return $districts;
        
    }
    
    protected function getTotalPopulation($districts)
    {
        $total = 0;
        foreach ($districts as $district) {
            $total += $district->getPopulation();
        }
        return $total;
    }
    
    protected function updatePopulationRatio(&$districts, $totalPopulation)
    {
        foreach ($districts as $district) {
            $district->updateRatio($totalPopulation);
        }
    }
    
    /**
     * Save.
     * 
     * @param District $district
     * @throws \InvalidArgumentException 
     */
    public function saveDistrict(District $district, $update = false)
    {           
        if ($this->isExist($district, $update)) {
            throw new \InvalidArgumentException('Error: Duplicated District ID.');
        }
        
        $manager = $this->getEntityManager();
        $manager->persist($district);        
        $manager->flush();
    }
    
    public function updateDistrict(District $district, $update = true)
    {
        $this->saveDistrict($district, $update);
    }
    
    /**
     * Check whether district already exist or not.
     * 
     * @param District $district
     * @return boolean 
     */
    public function isExist(District $district, $update = false)
    {
        $other = $this->findOneBy(array(
            'id'    => $district->getId(),
        ));
        
        if ($other) {
            if ($other->getId() === $district->getId()) {
                if ($update)
                    return false;
                else
                    return true;
            } else {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Delete district.
     * 
     * @param District $district
     * @throws \InvalidArgumentException 
     */
    public function deleteDistrict($id)
    {
        $district = $this->find($id);
        if (!$district) {
            throw new \InvalidArgumentException('Error: District is not found.');
        }
        
        $manager = $this->getEntityManager();        
        $manager->remove($district);
        $manager->flush();
    }
}